version: '3.7'

x-common: &commons
  env_file:
    - ${APP_ENV_FILE:-environment}
  sysctls:
    net.core.somaxconn: 16384
  ulimits:
    nproc: 65536
    nofile:
      soft: 32768
      hard: 65536
    memlock:
      soft: -1
      hard: -1

x-application: &application
  <<: *commons
  env_file:
    - ${APP_ENV_FILE:-environment}
  deploy:
    resources:
      limits:
        cpus: "4"
        memory: 4000M
    restart_policy:
      condition: any
  networks:
    - net

x-midware: &midware
  <<: *commons
  deploy:
    resources:
      limits:
        cpus: "2"
        memory: 1000M
    restart_policy:
      condition: any
  networks:
    - net

x-metrics: &metrics
  <<: *commons
  deploy:
    resources:
      limits:
        cpus: "0.85"
        memory: 250M
    restart_policy:
      condition: any

services:
  base:
    <<: *commons
    build:
      context: build
      dockerfile: dockerfile.spam-filter
      cache_from:
        - tensorflow/tensorflow:nightly-py3
        - local/spam-filter:${APP_TAG:-latest}
    image: local/spam-filter:${APP_TAG:-latest}
  app:
    <<: *application
    image: local/spam-filter:${APP_TAG:-latest}
    entrypoint: [ "gunicorn", "django_ml_spam_filter.wsgi:application" ]
    command:  [
                "--bind", ":9010",
                "--reuse-port",
                "--workers", "8",
                "--worker-class", "sync",
                "--log-level", "debug",
                "--timeout", "60",
                "--preload",
              ]
#    volumes:
#      - '/path/to/host/directory:/app/learning_content'
    ports:
      - ${APP_HTTP_PORT:-9010}:9010/tcp
    depends_on:
      - mq
      - cache
      - base
      - database
  worker:
    <<: *application
    image: local/spam-filter:${APP_TAG:-latest}
    entrypoint: [ "celery", "worker" ]
    command:  [
                "-A", "django_ml_spam_filter",
                "--queues", "${CELERY_QUEUE:-spam_filter_main}",
                "-n", "worker-spam-filter@%h",
                "--concurrency", "1",
                "--loglevel", "info",
                "-Ofair",
              ]
    depends_on:
      - mq
      - cache
      - app
      - base
      - database
  mq-metrics:
    <<: *metrics
    image: kbudde/rabbitmq-exporter:${MQ_METRICS_TAG:-latest}
    network_mode: service:mq
    depends_on:
      - mq
  mq:
    <<: *midware
    image: rabbitmq:${MQ_TAG:-3.7-management-alpine}
    expose:
      - 5672/tcp
    ports:
      - ${MQ_METRICS_PORT:-9419}:9419/tcp
      - ${MQ_MGMT_PORT:-15672}:15672/tcp
    volumes:
      - ${MQ_PVC:-rabbitmq-data}:/var/lib/rabbitmq:rw,consistent
  cache:
    <<: *midware
    image: redis:${CACHE_TAG:-4-alpine}
    command: [ "redis-server", "--appendonly", "yes" ]
    expose:
      - 6379/tcp
    volumes:
      - ${CACHE_PVC:-redis-data}:/data:rw,consistent
  database:
    <<: *midware
    image: postgres:${DATABASE_TAG:-9.6-alpine}
    expose:
      - 5432/tcp
    volumes:
      - ${DATABASE_PVC:-postgres-data}:/var/lib/postgresql/data:rw,consistent
volumes:
  rabbitmq-data: {}
  redis-data: {}
  postgres-data: {}

networks:
  net:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-spam-filter
